@page "/TLC2"

@inject ISnackbar Snackbar
@inject BasicService BasicService
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject DataService DataService

<PageTitle>Pipe Processing System 2</PageTitle>

<button @onclick="ProcessValues">Process Values</button>

@if (workOrderDetails == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />

}
else
{



    <MudStack Spacing="8">
        <MudContainer MaxWidth="MaxWidth.Small">
            <MudCard Elevation="3" Class="mt-6">
                <MudCardHeader>
                    <MudText Typo="Typo.h5">Manual Entry</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField @bind-Value="orderDetail.LotNumber" Label="Lot Number" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <MudTextField @bind-Value="orderDetail.JointNumber" Label="Joint Number" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <MudTextField @bind-Value="orderDetail.JobNumber" Label="Job Number" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <MudTextField @bind-Value="orderDetail.HeatNumber" Label="Heat Number" Variant="Variant.Outlined" Margin="Margin.Dense" />

                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleSubmit">Submit</MudButton>
                </MudCardActions>
            </MudCard>
        </MudContainer>

        <MudDataGrid T="PipeDetailP1TLC2" MultiSelection="true" Hover="true" SortMode="SortMode.Single" Items="@workOrderDetails" Filterable="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Records</MudText>
                <MudSpacer />

            </ToolBarContent>
            <Columns>
                <SelectColumn T="PipeDetailP1TLC2" />


   
                <PropertyColumn Property="x => x.LotNumber" />
                <PropertyColumn Property="x => x.JointNumber" />
                <PropertyColumn Property="x => x.DateTime" />
                <PropertyColumn Property="x => x.JobNumber" />
                <PropertyColumn Property="x => x.HeatNumber" />
                <PropertyColumn Property="x => x.Status" />
                <PropertyColumn Property="x => x.Val" />



            </Columns>
            <PagerContent>
                <MudDataGridPager T="PipeDetailP1TLC2" />
            </PagerContent>
        </MudDataGrid>
    </MudStack>
}

@code {
    List<PipeDetailP1TLC2>? workOrderDetails = null;
    PipeDetailP1TLC2 orderDetail = new PipeDetailP1TLC2
        {
            DateTime = DateTime.Now
        };
    protected override async Task OnInitializedAsync()
    {


        workOrderDetails = await BasicService.GetAll<PipeDetailP1TLC2>();

    }


    private async Task ProcessValues()
    {
        try
        {
            string result = await DataService.UpdatePipeDetailP1TLC2WithValAsync();

            if (result.StartsWith("Successfully"))
            {
                Snackbar.Add(result, Severity.Success);
            }
            else if (result == "No updates needed." || result == "No updates were needed or possible.")
            {
                Snackbar.Add(result, Severity.Info);
            }
            else
            {
                Snackbar.Add(result, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            bool result = await BasicService.SubmitEntity(orderDetail);

            if (result)
            {
                Snackbar.Add("Form submitted successfully!", Severity.Success);
                workOrderDetails = await BasicService.GetAll<PipeDetailP1TLC2>();

                // Clear the form by resetting orderDetail
                orderDetail = new PipeDetailP1TLC2
                    {
                        DateTime = DateTime.Now
                    };


            }
            else
            {
                Snackbar.Add("Form submission failed. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }


}