@page "/TLC2"

@using System.Runtime.InteropServices
@using ZXing;
@using ZXing.QrCode;
@using ZXing.Windows.Compatibility;
@using SkiaSharp;
@inject ISnackbar Snackbar
@inject BasicService BasicService
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject DataService DataService
@inject IJSRuntime JSRuntime
<PageTitle>Pipe Processing System 2</PageTitle>

<button @onclick="ProcessValues">Process Values</button>


@inject EpicorService EpicorService
@inject ISnackbar Snackbar
@using System.ComponentModel.DataAnnotations
@using System.Drawing
@using System.Drawing.Imaging
@using ZXing
@using ZXing.QrCode
<MudContainer MaxWidth="MaxWidth.Medium" Class="pa-4 mt-6">
    <MudPaper Elevation="3" Class="pa-4">
        <MudText Typo="Typo.h5" Class="mb-4">Epicor Job Information</MudText>

        <MudTextField @bind-Value="scannedString"
                      @ref="scannerInput"
                      Immediate="true"
                      AutoFocus="true"
                      Label="Scan Lot Number"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Material.Filled.QrCodeScanner"
                      Class="mb-4" />

        <MudButton Variant="Variant.Filled"
                   Color="MudBlazor.Color.Primary"
                   OnClick="HandleScan"
                   StartIcon="@Icons.Material.Filled.Search"
                   FullWidth="true">
            Scan
        </MudButton>
    </MudPaper>

    @if (jobInfo != null)
    {
        <MudPaper Elevation="3" Class="pa-4 mt-6">
            <MudText Typo="Typo.h6" Class="mb-4">Job Information</MudText>

            <MudGrid>
                <MudItem xs="12" sm="4">
                    <MudText><strong>Lot Number:</strong></MudText>
                    <MudText Class="ml-4">@jobInfo.LotNumber</MudText>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudText><strong>Heat Number:</strong></MudText>
                    <MudText Class="ml-4">@jobInfo.HeatNumber</MudText>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudText><strong>Job Number:</strong></MudText>
                    <MudText Class="ml-4">@jobInfo.JobNumber</MudText>
                </MudItem>
            </MudGrid>

        </MudPaper>

        <MudPaper Elevation="3" Class="pa-4 mt-6 d-flex flex-column align-center">
            <MudText Typo="Typo.h6" Class="mb-4">QR Code</MudText>

            <MudGrid Justify="Justify.Center">
                <MudItem xs="12" sm="4" Class="d-flex flex-column align-center">
                    @if (GeneratedQRCodes.Any())
                    {
                        <MudImage  Src="@GeneratedQRCodes.First().QRCode" Class="mx-auto mb-4" />
                        <MudButton Color="MudBlazor.Color.Primary"
                                   Variant="Variant.Filled"
                                   StartIcon="@Icons.Material.Filled.Print"
                                   OnClick="PrintQRCode">
                            Print QR Code
                        </MudButton>
                    }
                    else
                    {
                        <MudProgressCircular Class="mx-auto">Generating QR</MudProgressCircular>
                    }
                </MudItem>
            </MudGrid>
        </MudPaper>




    }
    else if (showManualEntry)
    {
        <MudContainer MaxWidth="MaxWidth.Small">
            <MudCard Elevation="3" Class="pa-4 mt-6">
                <MudCardHeader>
                    <MudText Typo="Typo.h5">Manual Entry</MudText>
                </MudCardHeader>
                <MudCardContent>

                    <MudTextField @bind-Value="orderDetail.LotNumber" Label="Lot Number" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <MudTextField @bind-Value="orderDetail.JointNumber" Label="Joint Number" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <MudTextField @bind-Value="orderDetail.JobNumber" Label="Job Number" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <MudTextField @bind-Value="orderDetail.HeatNumber" Label="Heat Number" Variant="Variant.Outlined" Margin="Margin.Dense" />

                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="HandleSubmit">Submit</MudButton>
                </MudCardActions>
            </MudCard>
        </MudContainer>

    }
</MudContainer>

@if (workOrderDetails == null)
{
    <MudProgressCircular Color="MudBlazor.Color.Primary" Indeterminate="true" />

}
else
{



    <MudStack Spacing="8">


        <MudDataGrid T="PipeDetailP1TLC2" MultiSelection="true" Hover="true" SortMode="SortMode.Single" Items="@workOrderDetails" Filterable="true" SelectedItemsChanged="OnSelectedItemChanged">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Records</MudText>
                <MudIconButton Icon="@Icons.Material.Outlined.Remove" Color="MudBlazor.Color.Inherit" OnClick="RemoveSelectedIncidents"></MudIconButton>
                <MudSpacer />

            </ToolBarContent>
            <Columns>
                <SelectColumn T="PipeDetailP1TLC2" />


   
                <PropertyColumn Property="x => x.LotNumber" />
                <PropertyColumn Property="x => x.JointNumber" />
                <PropertyColumn Property="x => x.DateTime" />
                <PropertyColumn Property="x => x.JobNumber" />
                <PropertyColumn Property="x => x.HeatNumber" />
                <PropertyColumn Property="x => x.Status" />
                <PropertyColumn Property="x => x.Val" />



            </Columns>
            <PagerContent>
                <MudDataGridPager T="PipeDetailP1TLC2" />
            </PagerContent>
        </MudDataGrid>
    </MudStack>
}

@code {
    private MudTextField<string> scannerInput;
    List<PipeDetailP1TLC2>? workOrderDetails = null;
    PipeDetailP1TLC2 orderDetail = new PipeDetailP1TLC2
        {
            DateTime = DateTime.Now
        };
    protected override async Task OnInitializedAsync()
    {


        workOrderDetails = (await BasicService.GetAll<PipeDetailP1TLC2>()).OrderByDescending(x => x.DateTime).ToList();

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await scannerInput.FocusAsync();
        }
    }

    private async Task PrintQRCode()
    {
        if (GeneratedQRCodes.Any())
        {
            string imageUrl = GeneratedQRCodes.First().QRCode;
            await JSRuntime.InvokeVoidAsync("printImage", imageUrl);
        }
    }




    private async Task ProcessValues()
    {
        try
        {
            string result = await DataService.UpdatePipeDetailP1TLC2WithValAsync();

            if (result.StartsWith("Successfully"))
            {
                Snackbar.Add(result, Severity.Success);
            }
            else if (result == "No updates needed." || result == "No updates were needed or possible.")
            {
                Snackbar.Add(result, Severity.Info);
            }
            else
            {
                Snackbar.Add(result, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleSubmit()
    {
        if (!ValidateForm() && showManualEntry)
        {
            return;
        }
        try
        {
            bool result = await BasicService.SubmitEntity(orderDetail);

            if (result)
            {
                Snackbar.Add("Form submitted successfully!", Severity.Success);
                await ProcessValues();
                workOrderDetails = (await BasicService.GetAll<PipeDetailP1TLC2>()).OrderByDescending(x => x.DateTime).ToList();

                // Clear the form by resetting orderDetail
                orderDetail = new PipeDetailP1TLC2
                    {
                        DateTime = DateTime.Now

                    };


            }
            else
            {
                Snackbar.Add("Form submission failed. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        showManualEntry = false;
    }

    private bool ValidateForm()
    {
        var validationContext = new ValidationContext(orderDetail, serviceProvider: null, items: null);
        var validationResults = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(orderDetail, validationContext, validationResults, true);

        if (!isValid && showManualEntry)
        {
            foreach (var validationResult in validationResults)
            {
                Snackbar.Add(validationResult.ErrorMessage, Severity.Warning);
            }
        }

        return isValid;
    }

    List<QRCodeInfo> GeneratedQRCodes { get; set; } = new List<QRCodeInfo>();
    public class QRCodeInfo
    {
        public string QRCode { get; set; }
        public string Number { get; set; }
    }

    private string RenderCardAsImage(string matrix)
    {
        int size = 300; // Square size for the entire image
        int qrCodeSize = 260; // Size of the QR code

        using (var surface = SKSurface.Create(new SKImageInfo(size, size)))
        {
            var canvas = surface.Canvas;
            canvas.Clear(SKColors.White);

            // Generate QR code
            var barcodeWriter = new BarcodeWriterPixelData
                {
                    Format = BarcodeFormat.QR_CODE,
                    Options = new QrCodeEncodingOptions
                    {
                        Width = qrCodeSize,
                        Height = qrCodeSize,
                        Margin = 0
                    }
                };

            var pixelData = barcodeWriter.Write(matrix);

            // Convert to SKBitmap
            using (var qrCodeBitmap = new SKBitmap())
            {
                var info = new SKImageInfo(pixelData.Width, pixelData.Height, SKColorType.Bgra8888, SKAlphaType.Premul);

                GCHandle pinnedArray = GCHandle.Alloc(pixelData.Pixels, GCHandleType.Pinned);
                IntPtr pointer = pinnedArray.AddrOfPinnedObject();

                // Specify the delegate explicitly to resolve ambiguity
                SKBitmapReleaseDelegate releaseProc = (IntPtr addr, object context) =>
                {
                    if (context is GCHandle handle && handle.IsAllocated)
                        handle.Free();
                };

                qrCodeBitmap.InstallPixels(info, pointer, info.RowBytes, releaseProc, pinnedArray);

                // Draw QR code
                int qrCodeX = (size - qrCodeSize) / 2;
                int qrCodeY = (size - qrCodeSize) / 2 - 20; // Shift up slightly to make room for text
                canvas.DrawBitmap(qrCodeBitmap, qrCodeX, qrCodeY);
            }

            // Draw text
            using (var paint = new SKPaint())
            {
                paint.Color = SKColors.Black;
                paint.IsAntialias = true;
                paint.TextAlign = SKTextAlign.Center;

                // Title
                paint.TextSize = 12;
                paint.Typeface = SKTypeface.FromFamilyName("Arial", SKFontStyleWeight.Bold, SKFontStyleWidth.Normal, SKFontStyleSlant.Upright);
                string titleText = "SeAH Steel USA";
                float titleY = (size - qrCodeSize) / 2 + qrCodeSize + 10;
                canvas.DrawText(titleText, size / 2, titleY, paint);

                // Matrix text
                paint.TextSize = 10;
                paint.Typeface = SKTypeface.FromFamilyName("Arial", SKFontStyleWeight.Normal, SKFontStyleWidth.Normal, SKFontStyleSlant.Upright);
                float matrixY = titleY + 20;
                canvas.DrawText(matrix, size / 2, matrixY, paint);
            }

            // Convert to base64
            using (var image = surface.Snapshot())
            using (var data = image.Encode(SKEncodedImageFormat.Png, 100))
            {
                byte[] bytes = data.ToArray();
                return "data:image/png;base64," + Convert.ToBase64String(bytes);
            }
        }
    }


    private string scannedString;
    private EpicorJobInfo jobInfo;
    private bool showManualEntry = false;
    private string jointNumber;
    private async Task HandleScan()
    {
        if (string.IsNullOrWhiteSpace(scannedString))
        {
            Snackbar.Add("Please enter a lot number.", Severity.Warning);
            return;
        }
        string lotNumber;
        int dashIndex = scannedString.IndexOf("24-");

        if (dashIndex != -1)
        {
            jointNumber = scannedString.Substring(0, dashIndex).Trim('-');
            lotNumber = scannedString.Substring(dashIndex);
        }
        else
        {
            Snackbar.Add("Invalid format. Lot number should contain '24-'.", Severity.Warning);
            return;
        }

        try
        {
            var (retrievedJobInfo, message) = await EpicorService.GetJobInfoByLotNumberAsync(lotNumber);

            if (message.StartsWith("Successfully"))
            {
                Snackbar.Add(message, Severity.Success);
                jobInfo = retrievedJobInfo;
                showManualEntry = false;


                try
                {
                    GeneratedQRCodes.Clear();
                    string cardImage = RenderCardAsImage(scannedString);
                    GeneratedQRCodes.Add(new QRCodeInfo { QRCode = cardImage, Number = scannedString });
                }
                catch(Exception ex)
                {

                    Snackbar.Add($"{ex}", Severity.Error);
                }


                await SubmitScannedRecord(jobInfo); // Add this line
            }
            else if (message.StartsWith("No job info found"))
            {
                Snackbar.Add(message, Severity.Warning);
                jobInfo = null;
                showManualEntry = true;
            }
            else
            {
                Snackbar.Add(message, Severity.Error);
                jobInfo = null;
                showManualEntry = true;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
            jobInfo = null;
            showManualEntry = true;
        }
    }

    private async Task SubmitScannedRecord(EpicorJobInfo jobInfo)
    {
        try
        {
            var newRecord = new PipeDetailP1TLC2
                {
                    LotNumber = jobInfo.LotNumber,
                    JobNumber = jobInfo.JobNumber,
                    HeatNumber = jobInfo.HeatNumber,
                    DateTime = DateTime.Now,
                    // Add other properties as needed
                };

            bool result = await BasicService.SubmitEntity(newRecord);

            if (result)
            {
                Snackbar.Add("Record submitted successfully!", Severity.Success);
                scannedString = null;
                await ProcessValues();
                await scannerInput.FocusAsync();
                workOrderDetails = (await BasicService.GetAll<PipeDetailP1TLC2>()).OrderByDescending(x => x.DateTime).ToList();
            }
            else
            {
                Snackbar.Add("Record submission failed. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred while submitting the record: {ex.Message}", Severity.Error);
        }
    }

    private List<PipeDetailP1TLC2> selectedDetails = new();
    private void OnSelectedItemChanged(HashSet<PipeDetailP1TLC2> selectedItems)
    {
        selectedDetails = selectedItems.ToList();
    }

    private async Task RemoveSelectedIncidents()
    {
        try
        {
            bool result = await BasicService.RemoveEntities(selectedDetails);
            if (result)
            {
                workOrderDetails = await BasicService.GetAll<PipeDetailP1TLC2>();
                selectedDetails.Clear();
                Snackbar.Add("Selected details removed successfully!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to remove selected details. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

}