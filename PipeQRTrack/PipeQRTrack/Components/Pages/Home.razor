@page "/"
@inject ISnackbar Snackbar
@inject BasicService BasicService
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject DataService DataService

<PageTitle>Home</PageTitle>


@if (workOrderDetails == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />

}
else
{




    <MudDataGrid T="PipeDetailComplete" MultiSelection="true" Hover="true" SortMode="SortMode.Single" Items="@workOrderDetails" Filterable="true" SelectedItemsChanged="OnSelectedItemChanged">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Records</MudText>
            <MudIconButton Icon="@Icons.Material.Outlined.Remove" Color="Color.Inherit" OnClick="RemoveSelectedIncidents"></MudIconButton>
            <MudSpacer />
                <MudSpacer />

            </ToolBarContent>
            <Columns>
                <SelectColumn T="PipeDetailComplete" />


     
                <PropertyColumn Property="x => x.LotNumber" />
                <PropertyColumn Property="x => x.JointNumber" />
                <PropertyColumn Property="x => x.DateTime" />
                <PropertyColumn Property="x => x.JobNumber" />
                <PropertyColumn Property="x => x.HeatNumber" />
                <PropertyColumn Property="x => x.Status" />
                <PropertyColumn Property="x => x.Val" />



            </Columns>
            <PagerContent>
                <MudDataGridPager T="PipeDetailComplete" />
            </PagerContent>
        </MudDataGrid>

}

@code {
    List<PipeDetailComplete>? workOrderDetails = null;

    protected override async Task OnInitializedAsync()
    {


        workOrderDetails = await BasicService.GetAll<PipeDetailComplete>();

    }

    private List<PipeDetailComplete> selectedDetails = new();
    private void OnSelectedItemChanged(HashSet<PipeDetailComplete> selectedItems)
    {
        selectedDetails = selectedItems.ToList();
    }

    private async Task RemoveSelectedIncidents()
    {
        try
        {
            bool result = await BasicService.RemoveEntities(selectedDetails);
            if (result)
            {
                workOrderDetails = await BasicService.GetAll<PipeDetailComplete>();
                selectedDetails.Clear();
                Snackbar.Add("Selected details removed successfully!", Severity.Success, config =>
                {
                    config.ShowCloseIcon = true;
                    config.VisibleStateDuration = 3000; // 3 seconds
                    config.SnackbarVariant = Variant.Filled;
                });
            }
            else
            {
                Snackbar.Add("Failed to remove selected details. Please try again.", Severity.Error, config =>
                {
                    config.ShowCloseIcon = true;
                    config.VisibleStateDuration = 5000; // 5 seconds
                    config.SnackbarVariant = Variant.Outlined;
                });
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error, config =>
            {
                config.ShowCloseIcon = true;
                config.VisibleStateDuration = 8000; // 8 seconds
                config.SnackbarVariant = Variant.Text;
            });
        }
    }



 

}