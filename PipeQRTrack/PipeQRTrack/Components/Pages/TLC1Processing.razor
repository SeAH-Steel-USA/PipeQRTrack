@page "/TLC1"
@using System.ComponentModel.DataAnnotations

@inject ISnackbar Snackbar
@inject BasicService BasicService
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject DataService DataService

<PageTitle>Pipe Processing System 1</PageTitle>

<button @onclick="ProcessValues">Process Values</button>


@inject EpicorService EpicorService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Medium" Class="pa-4 mt-6">
    <MudPaper Elevation="3" Class="pa-4">
        <MudText Typo="Typo.h5" Class="mb-4">Epicor Job Information</MudText>

        <MudTextField @bind-Value="scannedLotNumber"
                      Label="Scan Lot Number"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Material.Filled.QrCodeScanner"
                      Class="mb-4" />

        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="HandleScan"
                   StartIcon="@Icons.Material.Filled.Search"
                   FullWidth="true">
            Scan
        </MudButton>
    </MudPaper>

    @if (jobInfo != null)
    {
        <MudPaper Elevation="3" Class="pa-4 mt-6">
            <MudText Typo="Typo.h6" Class="mb-4">Job Information</MudText>

            <MudGrid>
                <MudItem xs="12" sm="4">
                    <MudText><strong>Lot Number:</strong></MudText>
                    <MudText Class="ml-4">@jobInfo.LotNumber</MudText>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudText><strong>Heat Number:</strong></MudText>
                    <MudText Class="ml-4">@jobInfo.HeatNumber</MudText>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudText><strong>Job Number:</strong></MudText>
                    <MudText Class="ml-4">@jobInfo.JobNumber</MudText>
                </MudItem>
            </MudGrid>
        </MudPaper>
    }
    else if(showManualEntry)
    {
                <MudContainer MaxWidth="MaxWidth.Small">
            <MudCard Elevation="3" Class="pa-4 mt-6">
                <MudCardHeader>
                    <MudText Typo="Typo.h5">Manual Entry</MudText>
                </MudCardHeader>
                <MudCardContent>
                
                    <MudTextField @bind-Value="orderDetail.LotNumber" Label="Lot Number" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <MudTextField @bind-Value="orderDetail.JointNumber" Label="Joint Number" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <MudTextField @bind-Value="orderDetail.JobNumber" Label="Job Number" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <MudTextField @bind-Value="orderDetail.HeatNumber" Label="Heat Number" Variant="Variant.Outlined" Margin="Margin.Dense" />

                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleSubmit">Submit</MudButton>
                </MudCardActions>
            </MudCard>
        </MudContainer>
        
    }
</MudContainer>

@if (workOrderDetails == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />

}
else
{

    <MudStack Spacing="8">
        <MudDataGrid T="PipeDetailP1TLC1" MultiSelection="true" Hover="true" SortMode="SortMode.Single" Items="@workOrderDetails" Filterable="true" SelectedItemsChanged="OnSelectedItemChanged">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Records</MudText>
                 <MudIconButton Icon="@Icons.Material.Outlined.Remove" Color="Color.Inherit" OnClick="RemoveSelectedIncidents"></MudIconButton>
                <MudSpacer />

            </ToolBarContent>
            <Columns>
                <SelectColumn T="PipeDetailP1TLC1" />
                <PropertyColumn Property="x => x.LotNumber" />
                <PropertyColumn Property="x => x.JointNumber" />
                <PropertyColumn Property="x => x.DateTime" />
                <PropertyColumn Property="x => x.JobNumber" />
                <PropertyColumn Property="x => x.HeatNumber" />
                <PropertyColumn Property="x => x.Status" />
                <PropertyColumn Property="x => x.Val" />



            </Columns>
            <PagerContent>
                <MudDataGridPager T="PipeDetailP1TLC1" />
            </PagerContent>
        </MudDataGrid>
    </MudStack>
}

@code {
    List<PipeDetailP1TLC1>? workOrderDetails = null;
    PipeDetailP1TLC1 orderDetail = new PipeDetailP1TLC1
        {
            DateTime = DateTime.Now
        };
    protected override async Task OnInitializedAsync()
    {


        workOrderDetails = await BasicService.GetAll<PipeDetailP1TLC1>();

    }


    private async Task ProcessValues()
    {
        try
        {
            string result = await DataService.UpdatePipeDetailP1TLC1WithValAsync();

            if (result.StartsWith("Successfully"))
            {
                Snackbar.Add(result, Severity.Success);
            }
            else if (result == "No updates needed." || result == "No updates were needed or possible.")
            {
                Snackbar.Add(result, Severity.Info);
            }
            else
            {
                Snackbar.Add(result, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleSubmit()
    {

        if (!ValidateForm() && showManualEntry)
        {
            return;
        }
        try
        {
            bool result = await BasicService.SubmitEntity(orderDetail);

            if (result)
            {
                Snackbar.Add("Form submitted successfully!", Severity.Success);
                workOrderDetails = await BasicService.GetAll<PipeDetailP1TLC1>();

                // Clear the form by resetting orderDetail
                orderDetail = new PipeDetailP1TLC1
                    {
                        DateTime = DateTime.Now
                    };


            }
            else
            {
                Snackbar.Add("Form submission failed. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }

        showManualEntry = false;
    }



    private string scannedLotNumber;
    private EpicorJobInfo jobInfo;
    private bool showManualEntry = false;
    private string jointNumber;
    private async Task HandleScan()
    {
        if (string.IsNullOrWhiteSpace(scannedLotNumber))
        {
            Snackbar.Add("Please enter a lot number.", Severity.Warning);
            return;
        }

        string lotNumber;
        int dashIndex = scannedLotNumber.IndexOf("24-");

        if (dashIndex != -1)
        {
            jointNumber = scannedLotNumber.Substring(0, dashIndex).Trim('-');
            lotNumber = scannedLotNumber.Substring(dashIndex);
        }
        else
        {
            Snackbar.Add("Invalid format. Lot number should contain '24-'.", Severity.Warning);
            return;
        }

        try
        {
            var (retrievedJobInfo, message) = await EpicorService.GetJobInfoByLotNumberAsync(lotNumber);

            if (message.StartsWith("Successfully"))
            {
                Snackbar.Add(message, Severity.Success);
                jobInfo = retrievedJobInfo;
                showManualEntry = false;
                await SubmitScannedRecord(jobInfo); // Add this line
            }
            else if (message.StartsWith("No job info found"))
            {
                Snackbar.Add(message, Severity.Warning);
                jobInfo = null;
                showManualEntry = true;
            }
            else
            {
                Snackbar.Add(message, Severity.Error);
                jobInfo = null;
                showManualEntry = true;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
            jobInfo = null;
            showManualEntry = true;
        }
    }

    private bool ValidateForm()
    {
        var validationContext = new ValidationContext(orderDetail, serviceProvider: null, items: null);
        var validationResults = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(orderDetail, validationContext, validationResults, true);

        if (!isValid && showManualEntry)
        {
            foreach (var validationResult in validationResults)
            {
                Snackbar.Add(validationResult.ErrorMessage, Severity.Warning);
            }
        }

        return isValid;
    }

    private async Task SubmitScannedRecord(EpicorJobInfo jobInfo)
    {



        try
        {
            var newRecord = new PipeDetailP1TLC1
                {
                    LotNumber = jobInfo.LotNumber,
                    JobNumber = jobInfo.JobNumber,
                    HeatNumber = jobInfo.HeatNumber,
                    JointNumber = jointNumber,
                    DateTime = DateTime.Now,
                    // Add other properties as needed
                };

            bool result = await BasicService.SubmitEntity(newRecord);

            if (result)
            {
                Snackbar.Add("Record submitted successfully!", Severity.Success);
                workOrderDetails = await BasicService.GetAll<PipeDetailP1TLC1>();
            }
            else
            {
                Snackbar.Add("Record submission failed. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred while submitting the record: {ex.Message}", Severity.Error);
        }
    }

    private List<PipeDetailP1TLC1> selectedDetails = new();
    private void OnSelectedItemChanged(HashSet<PipeDetailP1TLC1> selectedItems)
    {
        selectedDetails = selectedItems.ToList();
    }

    private async Task RemoveSelectedIncidents()
    {
        try
        {
            bool result = await BasicService.RemoveEntities(selectedDetails);
            if (result)
            {
                workOrderDetails = await BasicService.GetAll<PipeDetailP1TLC1>();
                selectedDetails.Clear();
                Snackbar.Add("Selected details removed successfully!", Severity.Success, config =>
                {
                    config.ShowCloseIcon = true;
                    config.VisibleStateDuration = 3000; // 3 seconds
                    config.SnackbarVariant = Variant.Filled;
                });
            }
            else
            {
                Snackbar.Add("Failed to remove selected details. Please try again.", Severity.Error, config =>
                {
                    config.ShowCloseIcon = true;
                    config.VisibleStateDuration = 5000; // 5 seconds
                    config.SnackbarVariant = Variant.Outlined;
                });
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error, config =>
            {
                config.ShowCloseIcon = true;
                config.VisibleStateDuration = 8000; // 8 seconds
                config.SnackbarVariant = Variant.Text;
            });
        }
    }

}